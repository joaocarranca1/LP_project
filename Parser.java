/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;

public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
{if ("" != null) return null;}
      break;
      }
    case LET:
    case TRUE:
    case FALSE:
    case MINUS:
    case NIL:
    case CONS:
    case MATCH:
    case LPAR:
    case DEREF:
    case NOT:
    case BOX:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FN:
    case Id:
    case Num:{
      t = Let();
      jj_consume_token(TERM);
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Let() throws ParseException {Token n;
  ASTNode t, e1, e2;
  List<Bind> decls  = new ArrayList<Bind>();;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS:
    case NIL:
    case CONS:
    case MATCH:
    case LPAR:
    case DEREF:
    case NOT:
    case BOX:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FN:
    case Id:
    case Num:{
      t = Seq();
      break;
      }
    case LET:{
      label_1:
      while (true) {
        jj_consume_token(LET);
        n = jj_consume_token(Id);
        jj_consume_token(EQUAL);
        e1 = BA();
        jj_consume_token(SEMIC);
decls.add(new Bind(n.image,e1));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LET:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      e2 = Seq();
t = new ASTLet(decls, e2);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Seq() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = SeqExp();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMIC:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      op = jj_consume_token(SEMIC);
      t2 = SeqExp();
t1 = new ASTSeq(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode SeqExp() throws ParseException {Token op;
 ASTNode t1, t2;
    t1 = BA();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      op = jj_consume_token(ASSIGN);
      t2 = BA();
t1 = new ASTAssign(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode BA() throws ParseException {Token op;
    ASTNode t1, t2;
    t1 = BM();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      op = jj_consume_token(OR);
      t2 = BM();
t1 = new ASTOr(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode BM() throws ParseException {Token op;
    ASTNode t1, t2;
    t1 = Rel();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      op = jj_consume_token(AND);
      t2 = Rel();
t1 = new ASTAnd(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Rel() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = ListExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case GTEQ:
    case LTEQ:
    case DIF:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        op = jj_consume_token(EQ);
        break;
        }
      case GT:{
        op = jj_consume_token(GT);
        break;
        }
      case LT:{
        op = jj_consume_token(LT);
        break;
        }
      case GTEQ:{
        op = jj_consume_token(GTEQ);
        break;
        }
      case LTEQ:{
        op = jj_consume_token(LTEQ);
        break;
        }
      case DIF:{
        op = jj_consume_token(DIF);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = ListExpr();
switch (op.kind) {
           case EQ: t1 = new ASTEq(t1, t2); break;
           case GT: t1 = new ASTGt(t1, t2); break;
           case LT: t1 = new ASTLt(t1, t2); break;
           case GTEQ: t1 = new ASTGte(t1, t2); break;
           case LTEQ: t1 = new ASTLte(t1, t2); break;
           case DIF: t1 = new ASTNeq(t1, t2); break;
         }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode ListExpr() throws ParseException {ASTNode t1, t2; Token op;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LAZY_CONS_OP:
    case CONS_OP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONS_OP:{
        op = jj_consume_token(CONS_OP);
        t2 = ListExpr();
t1 = new ASTCons(t1, t2);
        break;
        }
      case LAZY_CONS_OP:{
        op = jj_consume_token(LAZY_CONS_OP);
        t2 = ListExpr();
t1 = new ASTLazyCons(t1, t2);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Exp() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Term() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Apply();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case DIV:
      case LPAR:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        op = jj_consume_token(STAR);
        t2 = Apply();
t1 = new ASTMult(t1,t2);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV);
        t2 = Apply();
t1 = new ASTDiv(t1,t2);
        break;
        }
      case LPAR:{
        op = jj_consume_token(LPAR);
        t2 = Exp();
        jj_consume_token(RPAR);

        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Fact() throws ParseException {Token n, x, l, nilName;
  ASTNode t, e1, e2;
  List<Bind> decls;
  ASTNode  body, alt;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      n = jj_consume_token(Num);
t = new ASTInt(Integer.parseInt(n.image));
      break;
      }
    case TRUE:{
      n = jj_consume_token(TRUE);
t = new ASTBool(true);
      break;
      }
    case FALSE:{
      n = jj_consume_token(FALSE);
t = new ASTBool(false);
      break;
      }
    case Id:{
      n = jj_consume_token(Id);
t = new ASTId(n.image);
      break;
      }
    case BOX:{
      jj_consume_token(BOX);
      t = Fact();
t = new ASTBox(t);
      break;
      }
    case DEREF:{
      jj_consume_token(DEREF);
      t = Fact();
t = new ASTDeref(t);
      break;
      }
    case NIL:{
      jj_consume_token(NIL);
t = new ASTNil();
      break;
      }
    case CONS:{
      jj_consume_token(CONS);
      jj_consume_token(LPAR);
      e1 = Let();
      jj_consume_token(COMMA);
      e2 = Let();
      jj_consume_token(RPAR);
t = new ASTCons(e1, e2);
      break;
      }
    case MATCH:{
      jj_consume_token(MATCH);
      t = Let();
      jj_consume_token(LBRA);
      nilName = jj_consume_token(NIL);
      jj_consume_token(LISTARROW);
      e1 = Let();
      jj_consume_token(BAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAR:{
        jj_consume_token(LPAR);
        x = jj_consume_token(Id);
        jj_consume_token(CONS_OP);
        l = jj_consume_token(Id);
        jj_consume_token(RPAR);
        break;
        }
      case Id:{
        x = jj_consume_token(Id);
        jj_consume_token(CONS_OP);
        l = jj_consume_token(Id);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LISTARROW);
      e2 = Let();
      jj_consume_token(RBRA);
t = new ASTMatch(t, nilName.image, e1, x.image, l.image, e2);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t = Fact();
t = new ASTNeg(t);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      t = Fact();
t = new ASTNot(t);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      t = BA();
      jj_consume_token(LBRA);
      e1 = Let();
      jj_consume_token(RBRA);
      jj_consume_token(ELSE);
      jj_consume_token(LBRA);
      e2 = Let();
      jj_consume_token(RBRA);
t = new ASTIf(t, e1, e2);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      t = BA();
      jj_consume_token(LBRA);
      body = Let();
      jj_consume_token(RBRA);
t = new ASTWhile(t, body);
      break;
      }
    case FN:{
      jj_consume_token(FN);
      n = jj_consume_token(Id);
// Start collecting parameter names
      List<String> params = new ArrayList<>();
      params.add(n.image);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        n = jj_consume_token(Id);
// Add additional parameters
      params.add(n.image);
      }
      jj_consume_token(ARROW);
      jj_consume_token(LBRA);
      e2 = Let();
      jj_consume_token(RBRA);
// Build nested ASTFn nodes (currying)
      t = e2;
      for (int i = params.size() - 1; i >= 0; i--) {
          t = new ASTFn(params.get(i), t);
      }
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      t = Fact();
t = new ASTPrint(t);
      break;
      }
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      t = Fact();
t = new ASTPrintln(t);
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      t = Let();
      jj_consume_token(RPAR);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Apply() throws ParseException {ASTNode t, arg;
    t = Fact();
    label_9:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(LPAR);
      arg = Let();
      jj_consume_token(RPAR);
t = new ASTApp(t, arg);
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_Fact_321_7_40()
 {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_320_7_39()
 {
    if (jj_scan_token(PRINTLN)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_319_7_38()
 {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  static private boolean jj_3R_ListExpr_227_5_19()
 {
    if (jj_3R_Exp_247_6_20()) return true;
    return false;
  }

  static private boolean jj_3R_Let_128_7_14()
 {
    if (jj_scan_token(LET)) return true;
    return false;
  }

  static private boolean jj_3R_Let_128_5_12()
 {
    Token xsp;
    if (jj_3R_Let_128_7_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Let_128_7_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_BA_174_5_16()
 {
    if (jj_3R_BM_190_5_17()) return true;
    return false;
  }

  static private boolean jj_3R_Let_126_5_11()
 {
    if (jj_3R_Seq_141_5_13()) return true;
    return false;
  }

  static private boolean jj_3R_Let_125_5_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Let_126_5_11()) {
    jj_scanpos = xsp;
    if (jj_3R_Let_128_5_12()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Term_260_6_21()
 {
    if (jj_3R_Apply_329_3_22()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_302_7_37()
 {
    if (jj_scan_token(FN)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_301_7_36()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_300_7_35()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_299_7_34()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_Rel_206_6_18()
 {
    if (jj_3R_ListExpr_227_5_19()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_298_7_33()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_SeqExp_157_3_15()
 {
    if (jj_3R_BA_174_5_16()) return true;
    return false;
  }

  static private boolean jj_3R_Exp_247_6_20()
 {
    if (jj_3R_Term_260_6_21()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_287_7_32()
 {
    if (jj_scan_token(MATCH)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_286_7_31()
 {
    if (jj_scan_token(CONS)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_285_7_30()
 {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_284_7_29()
 {
    if (jj_scan_token(DEREF)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_283_7_28()
 {
    if (jj_scan_token(BOX)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_282_7_27()
 {
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_BM_190_5_17()
 {
    if (jj_3R_Rel_206_6_18()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_Let_125_5_10()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_281_7_26()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_Seq_141_5_13()
 {
    if (jj_3R_SeqExp_157_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_280_7_25()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_Fact_279_7_24()
 {
    if (jj_scan_token(Num)) return true;
    return false;
  }

  static private boolean jj_3R_Apply_329_3_22()
 {
    if (jj_3R_Fact_278_4_23()) return true;
    return false;
  }

  static private boolean jj_3R_Fact_278_4_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Fact_279_7_24()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_280_7_25()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_281_7_26()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_282_7_27()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_283_7_28()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_284_7_29()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_285_7_30()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_286_7_31()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_287_7_32()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_298_7_33()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_299_7_34()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_300_7_35()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_301_7_36()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_302_7_37()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_319_7_38()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_320_7_39()) {
    jj_scanpos = xsp;
    if (jj_3R_Fact_321_7_40()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x80552e1,0x20,0x80552e0,0x1000000,0x0,0x20000000,0x10000000,0xc0000000,0xc0000000,0x8800,0x8800,0x300,0x300,0x60400,0x60400,0x40000,0x4000000,0x80552c0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x31ed0,0x0,0x31ed0,0x0,0x20,0x0,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x31ed0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[50];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 18; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 50; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
